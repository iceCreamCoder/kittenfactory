{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","kittens.js","SearchBox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","kittens","map","kitten","i","key","username","SearchBox","searchChange","placeholder","type","onChange","App","onSearchChange","event","setState","searchfield","target","value","state","filteredKittens","this","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCASC,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACzB,OACI,yBAAKC,UAAU,wDACd,yBACOC,IAAG,+BAA0BF,EAA1B,aAAyCG,IAAI,WAFxD,KAID,6BACE,4BAAKL,GACL,2BAAIC,MCWGK,EAnBE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACf,OACI,6BAEQA,EAAQC,KAAI,SAACC,EAAQC,GACjB,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIK,EAAQG,GAAGR,GACfF,KAAMO,EAAQG,GAAGV,KACjBC,MAAOM,EAAQG,GAAGT,aCbjCM,EAAU,CACrB,CACEL,GAAI,EACJF,KAAM,4BACNY,SAAU,cACVX,MAAO,+BAET,CACEC,GAAI,EACJF,KAAM,kBACNY,SAAU,cACVX,MAAO,yBAET,CACEC,GAAI,EACJF,KAAM,yCACNY,SAAU,eACVX,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,gBACNY,SAAU,aACVX,MAAO,8BAET,CACEC,GAAI,EACJF,KAAM,wBACNY,SAAU,YACVX,MAAO,yBAET,CACEC,GAAI,EACJF,KAAM,mBACNY,SAAU,YACVX,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,oBACNY,SAAU,YACVX,MAAO,8BAET,CACEC,GAAI,EACJF,KAAM,sBACNY,SAAU,gBACVX,MAAO,yBAET,CACEC,GAAI,EACJF,KAAM,sBACNY,SAAU,eACVX,MAAO,uBAET,CACEC,GAAI,GACJF,KAAM,iBACNY,SAAU,cACVX,MAAO,qBC3CIY,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BACCA,UAAU,gCACVY,YAAY,sBACZC,KAAK,SACLC,SAAUH,MCmCRI,G,kBAnCX,aAAe,IAAD,8BACV,+CAQJC,eAAiB,SAACC,GACf,EAAKC,SAAS,CACVC,YAAaF,EAAMG,OAAOC,SATzB,EAAKC,MAAQ,CACTlB,QAASA,EACTe,YAAa,IAJX,E,sEAoBJ,IAAD,OACCI,EAAkBC,KAAKF,MAAMlB,QAAQqB,QAAO,SAAArB,GAC9C,OAAOA,EAAQP,KAAK6B,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAEtE,OACI,yBAAK1B,UAAU,MACX,wBAAIA,UAAU,MAAd,kBACA,kBAAC,EAAD,CAAWW,aAAca,KAAKR,iBAC9B,kBAAC,EAAD,CAAUZ,QAASmB,S,GA9BhBK,cCDnBC,IAASC,OACL,6BACI,kBAAC,EAAD,OAGPC,SAASC,eAAe,SNqHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7d611a24.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst Card = ({name, email, id}) => {\r\n   return(\r\n       <div className=\"bg-light-pink tc d dib pa3 br3 ma2 grow bw2 shadow-5\">\r\n        <img\r\n               src={`https://robohash.org/${id}?set=set4`} alt=\"kitten\"\r\n            /> >\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n        \r\n     </div>\r\n    </div>\r\n   ) \r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({kittens}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                kittens.map((kitten, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={kittens[i].id}\r\n                            name={kittens[i].name}\r\n                            email={kittens[i].email}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","export const kittens = [\n  {\n    id: 1,\n    name: 'Professor PersnicketyClaw',\n    username: 'theProfMeow',\n    email: 'pouncer-College20@claws.net'\n  },\n  {\n    id: 2,\n    name: 'Sally MeowWoeth',\n    username: 'silkyfeline',\n    email: 'quickfeelin@claws.cat'\n  },\n  {\n    id: 3,\n    name: 'Mademoiselle VigilantPounce the second',\n    username: 'SamCatterson',\n    email: 'pouncersOnCall@claws.biz'\n  },\n  {\n    id: 4,\n    name: 'Cheddar Claws',\n    username: 'ClawsHouse',\n    email: 'mice&cheeseRnice@claws.cat'\n  },\n  {\n    id: 5,\n    name: 'Cattailia MouseHunter',\n    username: 'Katterson',\n    email: 'MouseHunter@claws.cat'\n  },\n  {\n    id: 6,\n    name: 'Ferteh Clawsburn',\n    username: 'clawsBorn',\n    email: 'catfoodisnice@claws.cat'\n  },\n  {\n    id: 7,\n    name: 'Rufflton Startled',\n    username: 'largeEyes',\n    email: 'MrScaredAllTimes@claws.cat'\n  },\n  {\n    id: 8,\n    name: 'Kneader Meows the V',\n    username: 'kneading_time',\n    email: 'agilityPaws@claws.cat'\n  },\n  {\n    id: 9,\n    name: 'Catlanta SmallHider',\n    username: 'BasketsRbest',\n    email: 'Baskets!!@claws.cat'\n  },\n  {\n    id: 10,\n    name: 'HairFlex Spyer',\n    username: 'SpyingOnYou',\n    email: 'hidden@claws.cat'\n  }\n];\n","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n             className=\"pa2 ba b--green bg-washed-red\"\r\n             placeholder=\"Search for kittens?\"\r\n             type=\"search\"\r\n             onChange={searchChange}\r\n             />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport {kittens} from './kittens';\r\nimport SearchBox from './SearchBox';\r\nimport \"./App.css\"\r\n\r\n\r\n\r\n;class App extends Component  {\r\n\r\n    constructor() {\r\n        super() \r\n            this.state = {\r\n                kittens: kittens,\r\n                searchfield: ''\r\n            }\r\n    }\r\n\r\n\r\n    onSearchChange = (event) => {\r\n       this.setState({\r\n           searchfield: event.target.value\r\n       })\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const filteredKittens = this.state.kittens.filter(kittens => {\r\n            return kittens.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1\">Crazy Kittens!</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <CardList kittens={filteredKittens} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render(\n    <div>\n        <App />\n    </div>\n       ,     \n document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}